<div class="start_word text-center"><span id="start"><%= @level.start.upcase %></span></div>

<div class="history text-center">
  <% if @history.length > 6 %>
   <span class="glyphicon glyphicon-option-vertical"></span>
  <% end %>

  <% (-6..-2).to_a.each do |index| %>
    <% if @history[index]%>
      <span class="last_<%= -(index) - 1 %>"><%= @history[index]["word"].upcase %></span>
    <% end %>
  <% end %>
</div>

<div class="curr_word text-center">
  <% @word.word.upcase.split("").each_with_index do |letter, index| %>
    <div class="btn text-center curr_word_letter"><%= letter %></div>
  <% end %>
</div>

<div class="definition">
  <div class="definition_content"><%= simple_format(@definition) %></div>
</div>


<div class="target_word text-center"><span id="target"><%= @level.target.upcase %></span></div>

<div class="message_container">
  <div class="message">
    <div id="well_done">WELL <span></span> DONE</div>
    <div id="completed_in">YOU HAVE COMPLETED IN <span id="path_length"><%= @history.length - 1 %></span> MOVES</div>
    <% @history.each_with_index do |hash, hist_index| %>
      <% word = hash["word"] %>
      <% changed_index = hash["changed_index"] %>

      <% if_last = (hist_index != (@history.length - 1) ) ? "not_last" : "last" %>
      <div class="path_word_container <%= if_last %>">
        <span class="path_word">
          <% word.upcase.split("").each_with_index do |letter, index| %>
            <% unless changed_index == "" %>
              <% highlight = (index.to_s == changed_index) ? "highlight" : "" %>
            <% else %>
              <% highlight = "highlight" %>
            <% end %>
            <span class="<%= highlight %>"><%= letter %></span>
          <% end %>
        </span>

        <div class="path_word_definition"><%= simple_format(Rails.cache.fetch("define_#{word}"){Word.new(word,"common").get_definition}) %></div>
      </div>
    <% end %>

    <%= link_to "Play Again?", '#', class:"btn btn_custom" %>

  </div>
</div>


<script>
  var to_fade = ["#start", "#target", ".history", ".definition"];
  to_fade.forEach(function(class_to_fade) {
    $(class_to_fade).fadeOut(3000);
  });
  $(".curr_word_letter").addClass("complete", 3000);

  var panes = [".start_word", ".target_word"];
  panes.forEach(function(pane) {
    $(pane).delay(2500).animate({height: "50%"},2000);
  })
  setTimeout(hideEverything, 4500)
  setTimeout(function() {
     $("body").css("background", "#8be0de")
     $(".message_container").show();
  },4500)


  function hideEverything() {
    $('body > div').each(function() {
      if ( !$(this).hasClass("message_container") ) {
        $(this).hide();
      }
    });
  }

  $("#completed_in").delay(5500).fadeIn('fast');
  $("#path_length").delay(6000).fadeIn('slow');
  $(".path_word_container").each(function(index) {
    $(this).delay(6500 + index  * 500).fadeIn('slow', function() {
      automaticScroll()
      // var definition = $(this).children(".path_word_definition")
      // $(this).hover(function() { 
      //     definition.animate({ height: 'toggle', opacity: 'toggle' }, 'slow') 
      // }, function() { 
      //     definition.animate({ height: 'toggle', opacity: 'toggle' }, 'slow');
      // });
    });
  })

  setTimeout(function() {
    $(".path_word_definition").animate({ height: 'toggle', opacity: 'toggle' }, 500);
    $(".btn_custom").delay(500).fadeIn();
  }, 8500 + $(".path_word_container").length * 500 )

  setTimeout(function() {
    $(".path_word").each(function() {
      var definition = $(this).next(".path_word_definition")
      $(this).hover(function() { 
          definition.animate({ height: 'toggle', opacity: 'toggle' }, 'slow') 
      }, function() { 
          definition.animate({ height: 'toggle', opacity: 'toggle' }, 'slow');
      });
    })
  }, 9000 + $(".path_word_container").length * 500 )

  function automaticScroll() {
    $("html,body").stop().animate({ scrollTop: $(document).height() }, 'slow');
  }

  $(".highlight").each(function(index) {
    var red = 50 + index * 2
    if (red > 255) { red = 255 }
    var green = 163 - index * 2
    if (green < 0) { green = 0 }
    var blue = 202 - index * 10
    if (blue < 0) { blue = 0 }

    $(this).css("color", "rgb(" + red + ", " + green  +", " + blue + ")")
  })

</script>